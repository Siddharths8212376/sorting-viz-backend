{"version":3,"sources":["components/button.js","components/option.js","components/animations/selectionSortAnimations.js","components/algorithms/selectionSort.js","components/animations/bubbleSortAnimations.js","components/algorithms/bubbleSort.js","components/animations/mergeSortAnimations.js","components/algorithms/mergeSort.js","components/animations/insertionSortAnimations.js","components/algorithms/insertionSort.js","components/animations/quickSortAnimations.js","components/algorithms/quickSort.js","components/animations/heapSortAnimations.js","components/algorithms/heapSort.js","components/menu.js","components/array.js","components/visualizer.js","App.js","index.js"],"names":["Button","text","style","onClick","type","class","Option","href","role","selectionSortAnimations","array","animations","length","minIndex","i","j","push","t","SelectionSort","arr","animation_speed","speed","arrayBars","document","getElementsByClassName","barOneIndex","barTwoIndex","func","barOneStyle","barTwoStyle","setTimeout","backgroundColor","firstHeight","height","secondHeight","bubbleSortAnimations","BubbleSort","divide","mainArr","startIndex","endIndex","auxArr","midIndex","Math","floor","mergeNConquer","k","mergeSortAnimations","aux","slice","bars","MergeSort","barTwoHeight","console","log","insertionSortAnimations","key","InsertionSort","quickSort","pivotIndex","partition","pivot","quickSortAnimations","QuickSort","heapSort","size","heapify","nodeIndex","largestIndex","l","r","heapSortAnimations","HeapSort","generateArray","ar","randRange","max","disableButtons","querySelectorAll","forEach","elem","disabled","min","random","Menu","setArr","setSpeed","setSize","buttonStyle","marginLeft","marginRight","marginTop","marginBottom","adderStyle","borderRadius","className","display","textAlign","left","transform","width","addSpeed","decreaseSpeed","Array","map","value","idx","Visualizer","init_array","useState","animateSpeed","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6727d0e3.chunk.js","sourcesContent":["import React from 'react'\r\nimport disableButtons from './menu'\r\n\r\nconst Button = ({text, style, onClick}) => {\r\n    return (\r\n        <button type=\"button\" class=\"btn btn-primary\"  onClick={onClick} style={style}>{text}</button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\n\r\nconst Option = ({text, style, onClick}) => {\r\n    return (\r\n        <a href='#' class=\"btn btn-danger\" role=\"button\" onClick={onClick} style={style}>{text}</a>\r\n    )\r\n}\r\n\r\nexport default Option","import React from 'react'\r\n\r\nconst selectionSortAnimations = (array) => {\r\n    const animations = []\r\n    if (array.length <= 1) return array\r\n    let minIndex = 0\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        minIndex = i\r\n        for (let j = i + 1; j < array.length; j++) {\r\n            // comparing indices j and minIndex\r\n\r\n            animations.push([j, minIndex, 'comp'])\r\n            // for reverting the colors\r\n            animations.push([j, minIndex, 'rev'])\r\n            if (array[j] < array[minIndex]) {\r\n                minIndex = j\r\n                animations.push([minIndex, minIndex,'set'])\r\n            }\r\n\r\n        }\r\n        if (minIndex != i) {\r\n            // swap\r\n\r\n            animations.push([minIndex, i, 'swap'])\r\n            let t = array[minIndex]\r\n            array[minIndex] = array[i]\r\n            array[i] = t\r\n        }\r\n\r\n    }\r\n    for (let i = 0; i < array.length; i++) \r\n        animations.push([i, i, 'over'])\r\n    for (let i = 0; i < array.length; i++)\r\n        animations.push([i, i, 'rev'])\r\n    return animations\r\n}\r\n\r\nexport default selectionSortAnimations;","import React from 'react'\r\nimport selectionSortAnimations from '../animations/selectionSortAnimations'\r\n\r\nconst SelectionSort = ({arr, speed}) => {\r\n    const animation_speed = speed\r\n    const animations = selectionSortAnimations(arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar')\r\n        const [barOneIndex, barTwoIndex, func] = animations[i]\r\n        const barOneStyle = arrayBars[barOneIndex].style\r\n        const barTwoStyle = arrayBars[barTwoIndex].style\r\n        if (func === 'comp') {\r\n            let color = 'red'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color\r\n                barTwoStyle.backgroundColor = color\r\n              }, i * animation_speed);\r\n        } else if (func === 'rev'){ \r\n            let color = '#0066ED'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color\r\n                barTwoStyle.backgroundColor = color\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'over'){ \r\n            const [barOneIndex, barTwoIndex, fun] = animations[i]\r\n            const barOneStyle = arrayBars[barOneIndex].style\r\n            const barTwoStyle = arrayBars[barTwoIndex].style\r\n            let color = 'violet'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'set') {\r\n            let color = 'green'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color\r\n                barTwoStyle.backgroundColor = color\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'swap') {\r\n            // change bar heights here\r\n\r\n            let color = '#0066ED'\r\n            setTimeout(() => {\r\n                let firstHeight = arrayBars[barOneIndex].style.height\r\n                let secondHeight = arrayBars[barTwoIndex].style.height\r\n    \r\n                arrayBars[barOneIndex].style.height = secondHeight\r\n                arrayBars[barTwoIndex].style.height = firstHeight\r\n\r\n                barOneStyle.backgroundColor = color\r\n                barTwoStyle.backgroundColor = color\r\n\r\n              }, i * animation_speed);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default SelectionSort","import React from 'react'\r\n\r\nconst bubbleSortAnimations = (array) => {\r\n    const animations = []   \r\n    if (array.length <= 1) return array\r\n\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        for (let j = 0; j < array.length - i - 1; j++) {\r\n            // comparing indices\r\n            animations.push([j, j + 1, 'comp'])\r\n            // reverting the comparisons\r\n            animations.push([j, j + 1, 'rev'])\r\n            if (array[j] > array[j + 1]) {\r\n                // swap\r\n                animations.push([j, j + 1, 'swap'])\r\n                let t = array[j]\r\n                array[j] = array[j + 1]\r\n                array[j + 1] = t\r\n            }\r\n        }\r\n    }\r\n    for (let i = 0; i < array.length; i++) \r\n        animations.push([i, i, 'over'])\r\n    for (let i = 0; i < array.length; i++)\r\n        animations.push([i, i, 'rev'])\r\n    return animations\r\n}\r\n\r\nexport default bubbleSortAnimations","import React from 'react'\r\nimport bubbleSortAnimations from '../animations/bubbleSortAnimations'\r\n\r\nconst BubbleSort = ({ arr, speed }) => {\r\n    const animation_speed = speed\r\n    const animations = bubbleSortAnimations(arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar')\r\n        const [barOneIndex, barTwoIndex, func] = animations[i]\r\n        const barOneStyle = arrayBars[barOneIndex].style\r\n        const barTwoStyle = arrayBars[barTwoIndex].style\r\n        if (func === 'comp') {\r\n            let color = 'red'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n        } else if (func === 'rev'){ \r\n            let color = '#0066ED'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'over'){ \r\n            const [barOneIndex, barTwoIndex, fun] = animations[i]\r\n            const barOneStyle = arrayBars[barOneIndex].style\r\n            const barTwoStyle = arrayBars[barTwoIndex].style\r\n            let color = 'violet'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'swap') {\r\n            // change bar heights here\r\n            let color = '#0066ED'\r\n            setTimeout(() => {\r\n                let firstHeight = arrayBars[barOneIndex].style.height\r\n                let secondHeight = arrayBars[barTwoIndex].style.height\r\n    \r\n                arrayBars[barOneIndex].style.height = secondHeight\r\n                arrayBars[barTwoIndex].style.height = firstHeight\r\n\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n\r\n              }, i * animation_speed);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default BubbleSort","import React from 'react'\r\n\r\nconst mergeSortAnimations = (array) => {\r\n    const animations = []\r\n    if (array.length <= 1) return array\r\n    // creating an auxilliary array which is a copy of the \r\n    // initial array\r\n    const aux = array.slice()\r\n    const startIndex = 0\r\n    const endIndex = array.length - 1\r\n    divide(array, startIndex, endIndex, aux, animations)\r\n    for (let i = 0; i < array.length; i++) \r\n        animations.push([i, i, 'over'])\r\n    for (let i = 0; i < array.length; i++)\r\n        animations.push([i, i, 'rev'])\r\n    return animations\r\n}\r\n\r\nconst divide = (mainArr, startIndex, endIndex, auxArr, animations) => {\r\n    if (startIndex === endIndex) return \r\n    const midIndex = Math.floor((startIndex + endIndex) / 2)\r\n    divide(auxArr, startIndex, midIndex, mainArr, animations)\r\n    divide(auxArr, midIndex + 1, endIndex, mainArr, animations)\r\n    mergeNConquer(mainArr, startIndex, midIndex, endIndex, auxArr, animations)\r\n}\r\n\r\nconst mergeNConquer = (mainArr, startIndex, midIndex, endIndex, auxArr, animations) => {\r\n    let k = startIndex\r\n    let i = startIndex\r\n    let j = midIndex + 1\r\n\r\n    while (i <= midIndex && j <= endIndex) {\r\n        // comparing animation\r\n        animations.push([i, j, 'comp'])\r\n        // revert back to initial colors\r\n        animations.push([i, j, 'rev'])\r\n        if (auxArr[i] <= auxArr[j]) {\r\n            // overwrite og[k] with aux[i]\r\n            animations.push([k, j, auxArr[i], 'change'])\r\n            mainArr[k++] = auxArr[i++]\r\n        } else {\r\n            // overwrite og[k] with aux[j]\r\n            animations.push([k, i, auxArr[j], 'change'])\r\n            mainArr[k++] = auxArr[j++]\r\n        }\r\n\r\n    }\r\n\r\n    while (i <= midIndex) {\r\n        // compare with same value\r\n        animations.push([i, i, 'comp'])\r\n        // revert\r\n        animations.push([i, i, 'rev'])\r\n        // overwrite og[k] with aux[i]\r\n        animations.push([k, i, auxArr[i], 'change'])\r\n        mainArr[k++] = auxArr[i++]\r\n    }\r\n\r\n    while (j <= endIndex) {\r\n        // compare with same value\r\n        animations.push([j, j, 'comp'])\r\n        // revert\r\n        animations.push([j, j, 'rev'])\r\n        // overwrite og[k] with aux[i]\r\n        animations.push([k, j, auxArr[j], 'change'])\r\n        mainArr[k++] = auxArr[j++]\r\n    }\r\n}\r\n\r\nexport default mergeSortAnimations\r\n\r\n\r\n","import React from 'react'\r\nimport mergeSortAnimations from '../animations/mergeSortAnimations'\r\nconst bars = []\r\nconst MergeSort = ({ arr, speed }) => {\r\n    const animation_speed = speed\r\n    const animations = mergeSortAnimations(arr)\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar')\r\n\r\n        const func = animations[i][animations[i].length - 1]\r\n\r\n        if (func === 'comp') {\r\n            const [barOneIndex, barTwoIndex, fun] = animations[i]\r\n            const barOneStyle = arrayBars[barOneIndex].style\r\n            const barTwoStyle = arrayBars[barTwoIndex].style\r\n            let color = 'red'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n        } else if (func === 'rev'){ \r\n            const [barOneIndex, barTwoIndex, fun] = animations[i]\r\n            const barOneStyle = arrayBars[barOneIndex].style\r\n            const barTwoStyle = arrayBars[barTwoIndex].style\r\n            let color = '#0066ED'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'over'){ \r\n            const [barOneIndex, barTwoIndex, fun] = animations[i]\r\n            const barOneStyle = arrayBars[barOneIndex].style\r\n            const barTwoStyle = arrayBars[barTwoIndex].style\r\n            let color = 'violet'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'change') {\r\n\r\n            let color = '#0066ED'\r\n            setTimeout(() => {\r\n                const [barOneIndex, barTwoIndex, barTwoHeight, fun] = animations[i]\r\n                const barOneStyle = arrayBars[barOneIndex].style\r\n                let secondHeight = barTwoHeight\r\n\r\n                arrayBars[barOneIndex].style.height = `${secondHeight}px`\r\n                bars.push(arrayBars[barOneIndex].style.height)\r\n  \r\n                barOneStyle.backgroundColor = color\r\n\r\n\r\n              }, i * animation_speed);\r\n        }  \r\n    }\r\n    console.log(bars)\r\n}\r\n\r\nexport default MergeSort","import React from 'react'\r\n\r\nconst insertionSortAnimations = (array) => {\r\n    const animations = []\r\n    if (array.length <= 1) return array\r\n    for (let i = 1; i < array.length; i++) {\r\n        let key = array[i]\r\n        let j = i - 1\r\n\r\n        // comparison happens here\r\n        animations.push([j, i, 'comp'])\r\n        // revert comparisons\r\n        animations.push([j, i, 'comp'])\r\n        while (j >= 0 && array[j] > key) {\r\n            // to change height of bar[j + 1] with arr[j]\r\n            animations.push([j + 1, array[j], 'change'])\r\n            array[j + 1] = array[j]\r\n            j -= 1\r\n        }\r\n        // change arr[j + 1] to key\r\n        animations.push([j + 1, key, 'change'])\r\n        array[j + 1] = key\r\n    }\r\n    for (let i = 0; i < array.length; i++) \r\n        animations.push([i, i, 'over'])\r\n    for (let i = 0; i < array.length; i++)\r\n        animations.push([i, i, 'rev'])\r\n    return animations\r\n}\r\n\r\nexport default insertionSortAnimations","import React from 'react'\r\nimport insertionSortAnimations from '../animations/insertionSortAnimations'\r\n\r\nconst InsertionSort = ({ arr, speed }) => {\r\n    const animation_speed = speed\r\n    const animations = insertionSortAnimations(arr)\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar')\r\n        const func = animations[i][animations[i].length-1]\r\n\r\n        if (func === 'comp') {\r\n            const [barOneIndex, barTwoIndex, func] = animations[i]\r\n            const barOneStyle = arrayBars[barOneIndex].style\r\n            const barTwoStyle = arrayBars[barTwoIndex].style\r\n            let color = 'red'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n        } else if (func === 'rev'){ \r\n            const [barOneIndex, barTwoIndex, func] = animations[i]\r\n            const barOneStyle = arrayBars[barOneIndex].style\r\n            const barTwoStyle = arrayBars[barTwoIndex].style\r\n            let color = '#0066ED'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'over'){ \r\n            const [barOneIndex, barTwoIndex, fun] = animations[i]\r\n            const barOneStyle = arrayBars[barOneIndex].style\r\n            const barTwoStyle = arrayBars[barTwoIndex].style\r\n            let color = 'violet'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'change') {\r\n            // change bar heights here\r\n            const [barOneIndex, barTwoHeight, func] = animations[i]\r\n            const barOneStyle = arrayBars[barOneIndex].style\r\n            let color = '#0066ED'\r\n            setTimeout(() => {\r\n                let secondHeight = barTwoHeight\r\n                arrayBars[barOneIndex].style.height = `${secondHeight}px`\r\n                barOneStyle.backgroundColor = color\r\n\r\n              }, i * animation_speed);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default InsertionSort","import React from 'react'\r\n\r\nconst quickSortAnimations = (array) => {\r\n    const animations = []\r\n    if (array.length <= 1) return array\r\n    const startIndex = 0\r\n    const endIndex = array.length - 1\r\n    quickSort(array, startIndex, endIndex, animations)\r\n    for (let i = 0; i < array.length; i++) \r\n        animations.push([i, i, 'over'])\r\n    for (let i = 0; i < array.length; i++)\r\n        animations.push([i, i, 'rev'])\r\n    return animations\r\n}\r\n\r\nconst quickSort = (array, startIndex, endIndex, animations) => {\r\n    if (startIndex < endIndex) {\r\n        const pivotIndex = partition(array, startIndex, endIndex, animations)\r\n\r\n        quickSort(array, startIndex, pivotIndex - 1, animations)\r\n        quickSort(array, pivotIndex + 1, endIndex, animations)\r\n    }\r\n}\r\n\r\nconst partition = (array, startIndex, endIndex, animations) => {\r\n    // placing pivot as the last element\r\n    let pivot = array[endIndex]\r\n    let i = startIndex - 1\r\n\r\n    for (let j = startIndex; j <= endIndex; j++) {\r\n        // comparison\r\n        animations.push([j, endIndex, 'comp'])\r\n        // revert\r\n        animations.push([j, endIndex, 'rev'])\r\n        if (array[j] < pivot) {\r\n            i += 1\r\n            // swap\r\n            animations.push([i, j, 'swap'])\r\n            let t = array[i]\r\n            array[i] = array[j]\r\n            array[j] = t\r\n        }\r\n    }\r\n    // swap ar[i + 1] with ar[end]\r\n    animations.push([i + 1, endIndex, 'swap'])\r\n    let t = array[i + 1]\r\n    array[i + 1] = array[endIndex]\r\n    array[endIndex] = t\r\n    return i + 1\r\n}\r\n\r\nexport default quickSortAnimations","import React from 'react'\r\nimport quickSortAnimations from '../animations/quickSortAnimations'\r\n\r\nconst QuickSort = ({ arr, speed }) => {\r\n    const animation_speed = speed\r\n    const animations = quickSortAnimations(arr)\r\n    // after sort\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar')\r\n        const [barOneIndex, barTwoIndex, func] = animations[i]\r\n        const barOneStyle = arrayBars[barOneIndex].style\r\n        const barTwoStyle = arrayBars[barTwoIndex].style\r\n        if (func === 'comp') {\r\n            let color = 'red'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n        } else if (func === 'rev'){ \r\n            let color = '#0066ED'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'over'){ \r\n            const [barOneIndex, barTwoIndex, fun] = animations[i]\r\n            const barOneStyle = arrayBars[barOneIndex].style\r\n            const barTwoStyle = arrayBars[barTwoIndex].style\r\n            let color = 'violet'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'swap') {\r\n            // change bar heights here\r\n            let color = '#0066ED'\r\n            setTimeout(() => {\r\n                let firstHeight = arrayBars[barOneIndex].style.height\r\n                let secondHeight = arrayBars[barTwoIndex].style.height\r\n    \r\n                arrayBars[barOneIndex].style.height = secondHeight\r\n                arrayBars[barTwoIndex].style.height = firstHeight\r\n\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n\r\n              }, i * animation_speed);\r\n        }\r\n\r\n    }\r\n    \r\n\r\n}\r\n\r\nexport default QuickSort","import React from 'react'\r\n\r\nconst heapSortAnimations = (array) => {\r\n    const animations = []\r\n    if (array.length <= 1) return array\r\n    let size = array.length\r\n    heapSort(array, size, animations)\r\n    console.log('sorted')\r\n    for (let i = 0; i < array.length; i++) \r\n        animations.push([i, i, 'over'])\r\n    for (let i = 0; i < array.length; i++)\r\n        animations.push([i, i, 'rev'])\r\n    return animations\r\n}\r\n\r\nconst heapSort = (array, size, animations) => {\r\n    for (let i = size / 2 - 1; i >= 0 ; i--) \r\n        heapify(array, size, i, animations)\r\n\r\n    for (let i = size - 1; i > 0; i--) {\r\n        // swap\r\n        animations.push([0, i, 'swap'])\r\n        let t = array[0]\r\n        array[0] = array[i]\r\n        array[i] = t\r\n\r\n        heapify(array, i, 0, animations)\r\n    }\r\n}\r\n\r\nconst heapify = (array, size, nodeIndex, animations) => {\r\n    let largestIndex = nodeIndex\r\n    let l = 2 * nodeIndex + 1\r\n    let r = 2 * nodeIndex + 2\r\n\r\n    // compare l and largest\r\n    if (l < size) {\r\n    animations.push([l, largestIndex, 'comp'])\r\n    // revert\r\n    animations.push([l, largestIndex, 'rev'])\r\n    }\r\n    if (l < size && array[l] > array[largestIndex])\r\n        largestIndex = l\r\n\r\n    // compare r and largest\r\n    if (r < size) {\r\n    animations.push([r, largestIndex, 'comp'])\r\n    // revert\r\n    animations.push([r, largestIndex, 'rev'])\r\n    }\r\n\r\n    if (r < size && array[r] > array[largestIndex])\r\n        largestIndex = r\r\n    \r\n    // if largest != root\r\n    if (largestIndex != nodeIndex) {\r\n        // swap\r\n        animations.push([nodeIndex, largestIndex, 'swap'])\r\n        let t = array[nodeIndex]\r\n        array[nodeIndex] = array[largestIndex]\r\n        array[largestIndex] = t\r\n        heapify(array, size, largestIndex, animations)\r\n    }\r\n}\r\n\r\nexport default heapSortAnimations","import React from 'react'\r\nimport heapSortAnimations from '../animations/heapSortAnimations'\r\n\r\nconst HeapSort = ({ arr, speed }) => {\r\n    const animation_speed = speed\r\n    const animations = heapSortAnimations(arr)\r\n    // after sort\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar')\r\n        const [barOneIndex, barTwoIndex, func] = animations[i]\r\n        const barOneStyle = arrayBars[barOneIndex].style\r\n        const barTwoStyle = arrayBars[barTwoIndex].style\r\n        if (func === 'comp') {\r\n            let color = 'red'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n        } else if (func === 'rev'){ \r\n            let color = '#0066ED'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'over'){ \r\n            const [barOneIndex, barTwoIndex, fun] = animations[i]\r\n            const barOneStyle = arrayBars[barOneIndex].style\r\n            const barTwoStyle = arrayBars[barTwoIndex].style\r\n            let color = 'violet'\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * animation_speed);\r\n\r\n        } else if (func === 'swap') {\r\n            // change bar heights here\r\n            let color = '#0066ED'\r\n            setTimeout(() => {\r\n                let firstHeight = arrayBars[barOneIndex].style.height\r\n                let secondHeight = arrayBars[barTwoIndex].style.height\r\n    \r\n                arrayBars[barOneIndex].style.height = secondHeight\r\n                arrayBars[barTwoIndex].style.height = firstHeight\r\n\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n\r\n              }, i * animation_speed);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default HeapSort","import React, { useState } from 'react'\r\nimport Button from './button'\r\nimport Option from './option'\r\n\r\nimport SelectionSort from './algorithms/selectionSort'\r\nimport BubbleSort from './algorithms/bubbleSort'\r\nimport MergeSort from './algorithms/mergeSort'\r\nimport InsertionSort from './algorithms/insertionSort'\r\nimport QuickSort from './algorithms/quickSort'\r\nimport HeapSort from './algorithms/heapSort'\r\n\r\nfunction generateArray(size) {\r\n    const ar = []\r\n\r\n    for (let i = 0; i < size; i++) \r\n        ar.push(randRange(5, Math.max(2*size, 64)))\r\n\r\n    return ar\r\n}\r\n\r\nconst disableButtons = () => {\r\n    document.querySelectorAll('button').forEach(elem => {\r\n        elem.disabled = true\r\n    })\r\n}\r\n\r\nconst enableButtons = () => {\r\n    document.querySelectorAll('button').forEach(elem => {\r\n        elem.disabled = false\r\n    })\r\n}\r\n\r\nconst randRange = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nconst addSpeed = ({speed, setSpeed, size, setSize, setArr}) => {\r\n    const currentSpeed = speed\r\n    if (currentSpeed / 2 < 1)setSpeed(1)\r\n    else setSpeed(speed/2)\r\n\r\n\r\n    if (size * 2 >= 128 || size == 64) setSize(128)\r\n    else setSize(size*2)\r\n\r\n    setArr(generateArray(size))\r\n    console.log(size)\r\n    return speed\r\n}\r\n\r\nconst decreaseSpeed = ({speed, setSpeed, size, setSize, setArr}) => {\r\n    const currentSpeed = speed\r\n    const curSize = size\r\n    if (currentSpeed * 2 > 64) setSpeed(64)\r\n    else setSpeed(speed*2)\r\n\r\n    if (size / 2 <= 32 || size == 64) setSize(32)\r\n    else setSize(size/2)\r\n    \r\n    setArr(generateArray(size))\r\n    console.log(size)\r\n    return speed\r\n}\r\n\r\nconst Menu = ({arr, setArr, speed, setSpeed, size, setSize}) => {\r\n\r\n    const array = generateArray(size)\r\n    const buttonStyle = {\r\n        marginLeft:\"10px\", marginRight:\"10px\", marginTop:\"10px\", marginBottom:\"10px\"\r\n    }\r\n    const adderStyle = {\r\n        borderRadius:\"50%\"\r\n    }\r\n    return (\r\n        <nav className=\"navbar navbar-light\" style={{\r\n            backgroundColor:\"#e3f2fd\",\r\n            display:\"inline-block\",\r\n            textAlign:\"center\",\r\n            left:\"50%\",\r\n            transform:\"translatex(-50%)\",\r\n            width:\"100%\",\r\n            }\r\n            }>\r\n            <span class=\"font-weight-light\" style={{marginLeft:\"5px\", marginRight:\"15px\"}}>Speed: {1024/speed} <Button text={'+'} onClick={()=> {addSpeed({speed, setSpeed, size, setSize, setArr})}} style={adderStyle}/> <Button text={'-'} onClick={()=> {decreaseSpeed({speed, setSpeed, size, setSize, setArr})}} style={adderStyle}/></span>\r\n            <Option text={'Enable Options'} onClick={() => {enableButtons()}} style={buttonStyle}/>\r\n            <button type=\"button\" className=\"btn btn-success\" onClick={() => {setArr(generateArray(size));}} style={buttonStyle}>Generate Random Array</button>\r\n            <Button text={'Selection Sort'} onClick={()=>{SelectionSort({arr, speed}); disableButtons()}} style={buttonStyle} />\r\n            <Button text={'Bubble Sort'} onClick={()=>{BubbleSort({arr, speed}); disableButtons()}} style={buttonStyle} />\r\n            <Button text={'Merge Sort'} onClick={()=>{MergeSort({arr, speed}); disableButtons()}} style={buttonStyle} />\r\n            <Button text={'Insertion Sort'} onClick={()=>{InsertionSort({arr, speed}); disableButtons()}} style={buttonStyle} />\r\n            <Button text={'Quick Sort'} onClick={()=>{QuickSort({arr, speed}); disableButtons()}} style={buttonStyle} />\r\n            <Button text={'Heap Sort'} onClick={()=>{HeapSort({arr, speed}); disableButtons()}} style={buttonStyle} />\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react'\r\n\r\nconst Array = ({ arr }) => {\r\n    return (\r\n        <div className=\"array-container\">\r\n            {arr.map((value, idx) => (\r\n                <div className=\"array-bar\" key={idx} \r\n                style={{\r\n                    backgroundColor: \"#0066ED\",\r\n                    height: `${value*1.25}px`,\r\n                }}> </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Array","import React, { useState } from 'react'\r\nimport Menu from './menu'\r\nimport './visualizer.css'\r\nimport Array from './array'\r\n\r\nconst Visualizer = () => {\r\n    const init_array = []\r\n    const max = 50, min = 0\r\n    for (let i = min; i < max; i++) init_array.push(Math.floor(Math.random() * (2*max - min + 1) + min))\r\n    const [arr, setArr] = useState(init_array)\r\n    const [animateSpeed, setSpeed] = useState(4)\r\n    const [size, setSize] = useState(64)\r\n    return (\r\n        // visualizer basically has a menu option\r\n        // the array \r\n        <div>\r\n            <Menu arr={arr} setArr={setArr} speed={animateSpeed} setSpeed={setSpeed} size={size} setSize={setSize}/>\r\n            <Array arr={arr} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Visualizer","import React, { useState } from 'react'\nimport Visualizer from './components/visualizer'\nimport './App.css'\n\nconst App = () => {\n\n  return (\n    <div>\n    <Visualizer />\n    </div>\n  );\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}